#!/usr/bin/env bash
set -e
trap "exit 1" TERM
export TOP_PID=$$
#export IFS=$'\n'

# relies on the following:
#
#   bash > ~3, tested against 4 also (derivatives questionable and not tested)
#   egrep (version?)
#   sed
#   cut
#   eval (shell built-in)
#   which
#   tr
#   id
#   uname
#   curl | wget
#   sudo | su
#   tee
#   mkdir
#   touch

# potential to use for in-dev
#   fmt
#   awk
#   kill

version=0.1.0

command_exists() {
  command -v "$@" > /dev/null 2>&1
}

additional_warp_commands() {
  printf "\n--------\n\n"
  printf "Additional warp commands:\n\n"
  printf "alias\t\t Alias a function name to something else XXX TODO\n"
  if command_exists docker-compose; then
    printf "compose\t\t Run docker-compose commands\n"
  fi
  printf "function\t Configure additional custom functions to be added\n"
  printf "install\t\t Install various ecosystem components including Docker\n"
  if command_exists docker-machine; then
    printf "machine\t\t Run docker-machine commands\n"
  fi
  printf "original\t Show only original Docker command output XXX TODO\n"
  printf "uninstall\t Uninstall various ecosystem components including Docker\n"
  printf "update\t\t Update various ecosystem components including Docker\n\n"
  printf "Run 'docker COMMAND --help' for more information on a command.\n"
}

additional_custom_commands() {
  printf "\n--------\n\n"
  printf "Additional custom commands:\n"
  # update based on found functions in .dotfile and aliases
  namespaces=$(ls ~/.warp/function_namespaces)
  for d in $namespaces
  do
    printf "\n$d\n"
    files=$(cat ~/.warp/function_namespaces/$d/locations.txt)
    for f in $files
    do
      while read p; do
        pattern="[0-9a-zA-Z ]+\(\)"
        if [[ "$p" =~ $pattern ]]; then
          printf "\t ${p%(*}\n"
        fi
      done <~/.warp/function_namespaces/$d/${f##*/}
    done
  done
  printf "\nRun 'docker COMMAND --help' for more information on a command.\n\n"
}

get_docker_commands() {
  DOCKER_COMMANDS=()
  out=$($(which docker-orig))
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        DOCKER_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

get_compose_commands() {
  COMPOSE_COMMANDS=()
  # why is compose output to stderr instead of stdout!??!
  if [ $(which docker-compose) ]; then
    out=$(docker-compose 2>&1 | tee)
  else
    out=""
  fi
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      #comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        COMPOSE_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

get_machine_commands() {
  MACHINE_COMMANDS=()
  out=$($(which docker-machine))
  flag=0
  while read -r line; do
    if [ $flag == 1 ]; then
      comm=($line)
      #comm="${comm[0]}"
      if [ "$comm" == "" ]; then
        flag=0
      else
        MACHINE_COMMANDS+=($comm)
      fi
    fi
    if [[ "$line" =~ ^Commands: ]]; then
      flag=1
    fi
  done <<< "$out"
}

run_native_docker_ecosystem() {
  docker_command=0
  compose_command=0
  machine_command=0
  if [ -n "$1" ]; then
    for i in "${DOCKER_COMMANDS[@]}"
    do
      if [ "$i" == "$1" ] ; then
        docker_command=1
      fi
    done
    if [ -n "$2" ]; then
      if [ "$1" == "compose" ]; then
        for i in "${COMPOSE_COMMANDS[@]}"
        do
          if [ "$i" == "$2" ] ; then
            compose_command=1
          fi
        done
      elif [ "$1" == "machine" ]; then
        for i in "${MACHINE_COMMANDS[@]}"
        do
          if [ "$i" == "$2" ] ; then
            machine_command=1
          fi
        done
      fi
    else
      if [ "$1" == "compose" ]; then
        out=$(docker-compose 2>&1 | tee)
        while read -r line; do
          echo "$line"
        done <<< "$out"
        additional_warp_commands
        additional_custom_commands
        kill -s TERM $TOP_PID
      elif [ "$1" == "machine" ]; then
        dkr_native="$(which docker-machine)"

        out=$($dkr_native 2>&1 | tee)
        IFS=$'\n'
        fformat $out
        IFS=$' \t\n'

        additional_warp_commands
        additional_custom_commands
        kill -s TERM $TOP_PID
      fi
    fi
  fi
  if [ "$docker_command" == 1 ]; then
    dkr_native="$(which docker-orig) $*"

    out=$($dkr_native 2>&1 | tee)
    IFS=$'\n'
    fformat $out
    IFS=$' \t\n'

    kill -s TERM $TOP_PID
  elif [ "$compose_command" == 1 ]; then
    shift
    dkr_native="$(which docker-compose) $*"

    out=$($dkr_native 2>&1 | tee)
    IFS=$'\n'
    fformat $out
    IFS=$' \t\n'

    kill -s TERM $TOP_PID
  elif [ "$machine_command" == 1 ]; then
    shift
    dkr_native="$(which docker-machine) $*"

    out=$($dkr_native 2>&1 | tee)
    IFS=$'\n'
    fformat $out
    IFS=$' \t\n'

    kill -s TERM $TOP_PID
  else
    # checks only commands not in docker_commands
    for i in "${COMPOSE_COMMANDS[@]}"
    do
      if [ "$i" == "$1" ] ; then
        dkr_native="$(which docker-compose) $*"

        out=$($dkr_native 2>&1 | tee)
        IFS=$'\n'
        fformat $out
        IFS=$' \t\n'

        kill -s TERM $TOP_PID
      fi
    done
    for i in "${MACHINE_COMMANDS[@]}"
    do
      if [ "$i" == "$1" ] ; then
        dkr_native="$(which docker-machine) $*"

        out=$($dkr_native 2>&1 | tee)
        IFS=$'\n'
        fformat $out
        IFS=$' \t\n'

        kill -s TERM $TOP_PID
      fi
    done
  fi
}

warp_alias_command() {
  # XXX
  # store aliases in .dotfile for given name and list of functions
  echo "TODO"
}

warp_function_command() {
  function_args=("add" "rm" "update")
  if [ -n "$2" ]; then
    comm_exists=0
    for i in "${function_args[@]}"
    do
      if [ "$2" == "$i" ]; then
        if [ $2 == "add" ]; then
          comm_exists=1
          if [[ -n "$3" && -n "$4" ]]; then
            # XXX error checking needed
            $(mkdir -p ~/.warp/function_namespaces/"$3")
            echo "$4" >> ~/.warp/function_namespaces/$3/locations.txt

            base=$4
            # it's a url
            if [[ $4 =~ ^http ]]; then
              eval $curl $4 > ~/.warp/function_namespaces/$3/${base##*/}
            # it's a file
            else
              $(cp $4 ~/.warp/function_namespaces/$3/${base##*/})
            fi
          else
            printf "\nUsage: docker function add [OPTIONS] NAMESPACE URI\n\n"
            printf "Add custom functions from either a file path or a url\n\n"
          fi
        elif [ $2 == "rm" ]; then
          comm_exists=1
          if [[ -n "$3" && -n "$4" ]]; then
            # XXX error checking needed
            location_exists=0
            if [ -f ~/.warp/function_namespaces/"$3"/locations.txt ]; then
              while read p; do
                if [ "$4" == "$p" ]; then
                  location_exists=1
                fi
              done <~/.warp/function_namespaces/"$3"/locations.txt
            fi
            if [ "$location_exists" == 1 ]; then
              out="sed -i -E -e 's|$4||' ~/.warp/function_namespaces/$3/locations.txt"
              eval $out
              filename=$4
              if [ -f ~/.warp/function_namespaces/"$3"/"${filename##*/}" ]; then
                $(rm ~/.warp/function_namespaces/$3/${filename##*/})
              fi
              # cleanup
              if [ -f ~/.warp/function_namespaces/"$3"/locations.txt-E ]; then
                $(rm ~/.warp/function_namespaces/$3/locations.txt-E)
              fi
            fi
            printf "Successfully removed $4 from $3\n"
          elif [ -n "$3" ]; then
            # XXX error checking needed
            if [ -d ~/.warp/function_namespaces/"$3" ]; then
              $(rm -r ~/.warp/function_namespaces/$3)
            fi
            printf "Successfully removed $3\n"
          else
            printf "\nUsage: docker function rm [OPTIONS] NAMESPACE [URI]\n\n"
            printf "Remove custom functions in a namespace or the entire namespace\n\n"
          fi
        elif [ $2 == "update" ]; then
          comm_exists=1
          if [[ -n "$3" && -n "$4" ]]; then
            # XXX
            echo "TODO"
          elif [ -n "$3" ]; then
            # XXX
            echo "TODO"
          else
            printf "\nUsage: docker function update [OPTIONS] [NAMESPACE]\n\n"
            printf "Update all custom functions or only a specific namespace\n\n"
          fi
        fi
      fi
    done
    if [ "$comm_exists" == 0 ]; then
      printf "\nUsage: docker function [OPTIONS] COMMAND\n\n"
      printf "Add, remove or update custom functions\n\n"
      printf "Commands:\n"
      printf "\tadd\t Add a new function namespace\n"
      printf "\trm\t Remove a function namespace\n"
      printf "\tupdate\t Update function namespaces\n\n"
      printf "Run 'docker function COMMAND --help' for more information on a command.\n\n"
    fi
  else
    printf "warp: \"$1\" requires at least 1 argument. See 'warp $1 --help'."
  fi
}

warp_original_command() {
  # XXX
  # change alias back for docker, output how to get warp again
  echo "TODO"
}

warp_install_command() {
  # read in $2 to see if it is docker, machine, compose, all, etc.
  if [ -n "$2" ]; then
    comm_exists=0
    for j in "${ecosystem[@]}"
    do
      if [ "$2" == "$j" ]; then
        if [[ $2 == "docker" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing docker..."
          if command_exists docker-orig; then
            echo "docker already installed, skipping..."
          else
            install_comm="$curl https://get.docker.io/ | sh"
            eval "$install_comm"
          fi
        fi
        # default to linux x86_64
        platform="linux"
        arch="amd64"
        path="/usr/bin"
        uhost=$(uname -sm)
        if [[ "$uhost" =~ ^Darwin ]]; then
          platform="darwin"
          path="/usr/local/bin"
        fi
        if [[ "$uhost" =~ i386 ]]; then
          arch="386"
        fi
        if [[ $2 == "machine" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing machine..."
          if command_exists docker-machine; then
            echo "machine already installed, skipping..."
          else
            machine_url="https://github.com/docker/machine/releases/download/v0.3.0/docker-machine_$platform-$arch"
            install_comm="$sh_c '$curl $machine_url > $path/docker-machine'"
            eval "$install_comm"
            install_comm="$sh_c 'chmod +x $path/docker-machine'"
            eval "$install_comm"
          fi
        fi
        if [[ $2 == "compose" || $2 == "all" ]]; then
          comm_exists=1
          echo "installing compose..."
          if command_exists docker-compose; then
            echo "compose already installed, skipping..."
          else
            echo
            compose_url="https://github.com/docker/compose/releases/download/1.3.0/docker-compose-$(uname -s)-$(uname -m)"
            install_comm="$sh_c '$curl $compose_url > $path/docker-compose'"
            eval "$install_comm"
            install_comm="$sh_c 'chmod +x $path/docker-compose'"
            eval "$install_comm"
          fi
        fi
      fi
    done
    if [ "$comm_exists" == 0 ]; then
      printf "\nUsage: docker install [OPTIONS] TOOL\n\n"
      printf "Install Docker ecosystem tools\n\n"
      printf "Tools:\n"
      printf "\tdocker\t Install Docker\n"
      printf "\tcompose\t Install Docker Compose\n"
      printf "\tmachine\t Install Docker Machine\n"
      printf "\tall\t Install all Docker ecosystem tools\n"
    fi
  else
    printf "warp: \"$1\" requires 1 argument. See 'warp $1 --help'."
  fi
}

warp_uninstall_command() {
  # XXX
  echo "TODO"
}

warp_update_command() {
  # XXX
  echo "TODO"
}

run_warp_command() {
  warp_install_commands=("alias" "function" "install" "original" "uninstall" "update")
  ecosystem=("docker" "machine" "compose" "all")

  # begin credit to https://get.docker.com/
  user="$(id -un 2>/dev/null || true)"
  sh_c='sh -c'
  if [ "$user" != 'root' ]; then
    if command_exists sudo; then
      sh_c='sudo -E sh -c'
    elif command_exists su; then
      sh_c='su -c'
    else
      printf "Error: this installer needs the ability to run commands as root.\n"
      printf "We are unable to find either \"sudo\" or \"su\" available to make this happen.\n"
      exit 1
    fi
  fi

  curl=''
  if command_exists curl; then
    curl='curl -sSL'
  elif command_exists wget; then
    curl='wget -qO-'
  elif command_exists busybox && busybox --list-modules | grep -q wget; then
    curl='busybox wget -qO-'
  fi
  # end credit

  if [ -n "$1" ]
  then
    for i in "${warp_install_commands[@]}"
    do
      if [ "$1" == "$i" ]; then
        if [ "$1" == "alias" ]; then
          warp_alias_command "$@"
        elif [ "$1" == "function" ]; then
          warp_function_command "$@"
        elif [ "$1" == "install" ]; then
          warp_install_command "$@"
        elif [ "$1" == "original" ]; then
          warp_original_command "$@"
        elif [ "$1" == "uninstall" ]; then
          warp_uninstall_command "$@"
        elif [ "$1" == "update" ]; then
          warp_update_command "$@"
        fi
      fi
    done
  fi
}

run_custom_command() {
  if [[ -n "$1" && -n "$2" ]]; then
    namespaces=$(ls ~/.warp/function_namespaces)
    for d in $namespaces
    do
      if [ "$1" == "$d" ]; then
        files=$(cat ~/.warp/function_namespaces/$d/locations.txt)
        for f in $files
        do
          while read p; do
            pattern="[0-9a-zA-Z ]+\(\)"
            if [[ "$p" =~ $pattern ]]; then
              if [ "$2" == ${p%(*} ]; then
                shift
                shift
                source ~/.warp/function_namespaces/$d/${f##*/}
                eval ${p%(*} $*
              fi
            fi
          done <~/.warp/function_namespaces/$d/${f##*/}
        done
      fi
    done
  fi
}

read_args() {
  if [ -n $1 ]; then
    if [ "$1" == "v" ]; then
      printf "warp $version\n"
    fi
  fi

  # no args, just print help
  if [ $# == 0 ]; then
    # docker is installed, print out docker help + warp help
    if command_exists docker-orig; then
      (
        out=$($(which docker-orig 2>&1 | tee))
        IFS=$'\n'
        fformat $out
        IFS=$' \t\n'

        additional_warp_commands
        additional_custom_commands
      )
    # docker is not yet installed
    else
      printf "Usage: docker [OPTIONS] COMMAND [arg...]\n\n"
      printf "This is warp $version, Docker is not currently installed.\n\n"
      printf "Commands:\n\n"
      printf "install\t\t Install various ecosystem components including Docker\n"
      printf "uninstall\t Uninstall various ecosystem components including Docker\n"
      printf "update\t\t Update various ecosystem components including Docker\n\n"
      printf "Run 'docker COMMAND --help' for more information on a command.\n\n"
    fi
  # there are args, do something
  else
    # if docker is installed, get native commands for wrapping
    if command_exists docker-orig; then
      (
        # docker is installed, get native docker commands
        # check command, if native docker command, pass off
        get_docker_commands

        if command_exists docker-compose ; then
          get_compose_commands
        fi
        if command_exists docker-machine ; then
          get_machine_commands
        fi
        run_native_docker_ecosystem "$@"
      )
    fi
    run_warp_command "$@"
    run_custom_command "$@"
  fi

  echo
}

loadcolors() {

  export _FG_BLACK=$(echo -en '\033[0;30m')
  export _FG_DARK_GRAY=$(echo -en '\033[1;30m')

  export _FG_RED=$(echo -en '\033[0;31m')
  export _FG_BRIGHT_RED=$(echo -en '\033[1;31m')

  export _FG_GREEN=$(echo -en '\033[0;32m')
  export _FG_BRIGHT_GREEN=$(echo -en '\033[1;32m')

  export _FG_YELLOW=$(echo -en '\033[0;33m')
  export _FG_BRIGHT_YELLOW=$(echo -en '\033[1;33m')

  export _FG_BLUE=$(echo -en '\033[0;34m')
  export _FG_BRIGHT_BLUE=$(echo -en '\033[1;34m')

  export _FG_MAGENTA=$(echo -en '\033[0;35m')
  export _FG_BRIGHT_MAGENTA=$(echo -en '\033[1;35m')

  export _FG_CYAN=$(echo -en '\033[0;36m')
  export _FG_BRIGHT_CYAN=$(echo -en '\033[1;36m')

  export _FG_WHITE=$(echo -en '\033[0;37m')
  export _FG_BRIGHT_WHITE=$(echo -en '\033[1;37m')

  export _BG_BLACK=$(echo -en '\033[40m')
  export _BG_RED=$(echo -en '\033[41m')
  export _BG_GREEN=$(echo -en '\033[42m')
  export _BG_YELLOW=$(echo -en '\033[43m')
  export _BG_BLUE=$(echo -en '\033[44m')
  export _BG_MAGENTA=$(echo -en '\033[45m')
  export _BG_CYAN=$(echo -en '\033[46m')
  export _BG_WHITE=$(echo -en '\033[47m')

  # overwritten based on default values for theme
  # XXX prolly need to fill in the blanks for perfect width control? :bicycle:
  export _RESET=$(echo -en '\033[0m')
  #export _NL=$(echo -en '\012')

  #printf "$_FG_GREEN""$_BG_BLUE""asdf""$_RESET"
  #printf "$_FG_GREEN""$_BG_BLUE""asdf""$_C_TRUNC1""$_FG_BRIGHT_CYAN""$_BG_RED""$_C_MORE1""$_RESET"

}

loadchars() {
  export _C_DEATH="\xE2\x98\xA0"
  #export _C_GRAD1="░"
  #export _C_MORE1="❱"
  export _C_TRUNC1="⤏ "
  export _C_MORE1="⤵ "
}

fformat() {

  local in=${@}

  if [[ $WARP_BEHAVIOR == "fold" ]]
  then
    #local in2=$(echo "$in" | fmt -w 40)
    #IFS=$'\n'
    #local in3=($in)
    #for i in "${in3[@]}"; do
      #echo "i, $i"
    #  local formatted=$(echo $i | fmt -w $WARP_WIDTH)
    #  if [[ $formatted != $i ]]; then
    #    # truncating
    #    #local in2+=$(echo "$formatted" | sed -E -e "s/\$(.)/$_FG_WRAP$_BG_WRAP$_C_MORE1$_RESET\1/g")
    #    local in2+=$(echo "$formatted")
    #    local in2+=$(echo)
    #  else
    #    # not truncating
    #    local in2+=$(echo "$i")
    #    local in2+=$(echo)
    #  fi
    #done
    ## normalize
    #IFS=$' \t\n'
    #sed ‘s/\(.\{1,80\}\) /\1\n/g’ foo.txt
    #    local in2=$(echo "$in" | sed -E -e "s/(.{1,$WARP_WIDTH}) /\1_NL/g" | sed -E -e "s/_NL([^ ]+$)/ \1/")
    # caveats to address - lines without spaces, like from `docker inpsect`, usage of pipe
    local in2=$(echo "$in" | sed -E -e "s/\ +$//" | sed -E -e "s/(.{1,$WARP_WIDTH}) /\1\|/g" | sed -E -e "s/\|([^ ]+)$/ \1/" | sed -E -e "s/\|/$_FG_WRAP$_BG_WRAP$_C_MORE1$_RESET\|/g")
    # | fold -w $WARP_WIDTH)
  elif [[ $WARP_BEHAVIOR == "truncate" ]]; then
    local in2=$(echo "$in" | sed -E -e "s/^(.{$WARP_WIDTH,$WARP_WIDTH}).*/\1$_FG_WRAP$_BG_WRAP$_C_TRUNC1$_RESET/")
  else
    echo "No correct WARP_BEHAVIOR defined"
    exit 1
  fi

  echo "$in2" \
      | sed -E -e "s/^([\ ]+)([A-Za-z0-9]+)([\ ]{2,})(.*)/\1$_FG_ACTION$_BG_ACTION\2$_RESET\3\4/g" \
      | sed -E -e "s/^(.*)(ERROR|error|Error|FATA|no such)(.*)$/$_BG_ERROR$_FG_ERROR\1\2\3$_RESET/g" \
      | tr '|' '\n'
  #    | sed -E -e "s/^([\ ]+)([A-Za-z0-9]+)([\ ]{2,})(.*)/\1$_FG_ACTION$_BG_ACTION\2\3$_FG_DESCRIPTION$_BG_DESCRIPTION\4/g" \
  #    | tr '|' '\n'
  #   | sed -E -e "s/$/$_RESET/g"
    #    | tr "_NL" "$_C_MORE1\n"
    #"/asdf`echo`/g'
    #$_C_MORE1\r\nasdf$_NL$'\\\\n'/g"

  #for ((i = 0; i < ${#in[@]}; i++)); do
    #printf "${in[1]}"
    #"${in[$i]}"
    #"|${i}|""2|${in[$i]}|  "
  #done

}

getrc() {

  IFS=$' \t\n'

  loadchars
  loadcolors

  # defaults, all easily overwritten with well-formed definitions in your
  # very own ~/.warprc
  #export WARP_WIDTH=80
  export WARP_WIDTH=150
  export _BG_ERROR=$_BG_RED
  export _FG_ERROR=$_FG_BRIGHT_WHITE
  export _FG_ACTION=$_FG_BRIGHT_WHITE
  export _BG_ACTION=$_BG_BLUE
  export _FG_DESCRIPTION=$_FG_BRIGHT_YELLOW
  export _BG_DESCRIPTION=$_BG_BLACK
  export _FG_WRAP=$_FG_BRIGHT_RED
  export _BG_WRAP=$_BG_BLACK

  # WARP_BEHAVIOR defines line wrapping or truncating modes: 'fold' or 'truncate'
  #export WARP_BEHAVIOR=fold # 'truncate' also supported
  export WARP_BEHAVIOR=truncate

  # drop 2 characters for wide wrap/trunc characters
  export WARP_WIDTH=$((WARP_WIDTH-=2))

  #fformat "$(docker)"

  if [ -f ~/.warprc ]
  then
    #$(egrep '^(WARP)?_[A-Z0-9_]+=[\$_A-Za-z0-9]+$' ~/.warprc | sed -e 's/^/export /')
    source ~/.warprc
    #env | egrep ^WARP_
  fi

}

storage() {
  $(mkdir -p ~/.warp)
  $(mkdir -p ~/.warp/function_namespaces)
  $(mkdir -p ~/.warp/versions)
  $(touch ~/.warp/aliases.txt)
  $(echo "warp $version" > ~/.warp/version)
}

check_install() {
  if command_exists docker; then
    dkr=$(which docker)
    if command_exists docker-orig; then
      storage
      getrc
    else
      # begin credit to https://get.docker.com/
      user="$(id -un 2>/dev/null || true)"
      sh_c='sh -c'
      if [ "$user" != 'root' ]; then
        if command_exists sudo; then
          sh_c='sudo -E sh -c'
        elif command_exists su; then
          sh_c='su -c'
        else
          printf "Error: this installer needs the ability to run commands as root.\n"
          printf "We are unable to find either \"sudo\" or \"su\" available to make this happen.\n"
          exit 1
        fi
      fi

      curl=''
      if command_exists curl; then
        curl='curl -sSL'
      elif command_exists wget; then
        curl='wget -qO-'
      elif command_exists busybox && busybox --list-modules | grep -q wget; then
        curl='busybox wget -qO-'
      fi
      # end credit

      # using cp in case the following curl fails
      install_comm="$sh_c 'cp $dkr $dkr-orig'"
      eval "$install_comm"
      install_comm="$sh_c '$curl warp.dockerana.com > $dkr'"
      eval "$install_comm"
      exit 0
    fi
  fi
}

check_install
read_args "$@"

exit 0
